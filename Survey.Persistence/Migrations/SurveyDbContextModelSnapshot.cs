// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey.Persistence;

namespace Survey.Persistence.Migrations
{
    [DbContext(typeof(SurveyDbContext))]
    partial class SurveyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Survey.Domain.Survey.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Survey.Domain.Survey.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AnaliticsType");

                    b.Property<string>("Description");

                    b.Property<bool>("IsOpen");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("Survey.Domain.Survey.FormUser", b =>
                {
                    b.Property<int>("FormId");

                    b.Property<int>("UserId");

                    b.HasKey("FormId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FormsUsers");
                });

            modelBuilder.Entity("Survey.Domain.Survey.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AnswerId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("OrderIndex");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("Options");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Option");
                });

            modelBuilder.Entity("Survey.Domain.Survey.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CustomErrorMessage");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("Survey.Domain.Survey.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Survey.Domain.Survey.ResponseOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("OptionId");

                    b.Property<int>("ResponseId");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("ResponseOptions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ResponseOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int>("FormId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Survey.Domain.Survey.SectionQuestion", b =>
                {
                    b.Property<int>("SectionId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("QuestionOrderIndex");

                    b.HasKey("SectionId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SectionsQuestions");
                });

            modelBuilder.Entity("Survey.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Survey.Domain.Survey.CheckBoxOption", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.Option");

                    b.Property<bool>("IsSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.ToTable("CheckBoxOptions");

                    b.HasDiscriminator().HasValue("CheckBoxOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.RadioButtonOption", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.Option");

                    b.Property<int>("GoToSection");

                    b.Property<bool>("IsSelected")
                        .HasColumnName("RadioButtonOption_IsSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("RadioButtonOption_Name")
                        .HasMaxLength(50);

                    b.ToTable("RadioButtonOptions");

                    b.HasDiscriminator().HasValue("RadioButtonOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.TextOption", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.Option");

                    b.Property<string>("Text")
                        .HasMaxLength(100);

                    b.ToTable("TextOptions");

                    b.HasDiscriminator().HasValue("TextOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.CheckBoxesQuestion", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.Question");


                    b.ToTable("CheckBoxesQuestions");

                    b.HasDiscriminator().HasValue("CheckBoxesQuestion");
                });

            modelBuilder.Entity("Survey.Domain.Survey.RadioButtonsQuestion", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.Question");


                    b.ToTable("RadioButtonsQuestions");

                    b.HasDiscriminator().HasValue("RadioButtonsQuestion");
                });

            modelBuilder.Entity("Survey.Domain.Survey.ShortQuestion", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.Question");


                    b.ToTable("ShortQuestions");

                    b.HasDiscriminator().HasValue("ShortQuestion");
                });

            modelBuilder.Entity("Survey.Domain.Survey.ResponseCheckBoxOption", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.ResponseOption");

                    b.Property<bool>("IsSelected");

                    b.ToTable("ResponseCheckBoxOptions");

                    b.HasDiscriminator().HasValue("ResponseCheckBoxOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.ResponseRadioButtonOption", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.ResponseOption");

                    b.Property<bool>("IsSelected")
                        .HasColumnName("ResponseRadioButtonOption_IsSelected");

                    b.ToTable("ResponseRadioButtonOptions");

                    b.HasDiscriminator().HasValue("ResponseRadioButtonOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.ResponseTextOption", b =>
                {
                    b.HasBaseType("Survey.Domain.Survey.ResponseOption");

                    b.Property<string>("Text")
                        .HasMaxLength(100);

                    b.ToTable("ResponseTextOptions");

                    b.HasDiscriminator().HasValue("ResponseTextOption");
                });

            modelBuilder.Entity("Survey.Domain.Survey.Answer", b =>
                {
                    b.HasOne("Survey.Domain.Survey.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("Survey.Domain.Survey.Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Survey.FormUser", b =>
                {
                    b.HasOne("Survey.Domain.Survey.Form", "Form")
                        .WithMany("FormUsers")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survey.Domain.Users.User", "User")
                        .WithMany("UserForms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Survey.Option", b =>
                {
                    b.HasOne("Survey.Domain.Survey.Answer", "Answer")
                        .WithMany("Options")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Survey.Response", b =>
                {
                    b.HasOne("Survey.Domain.Users.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Survey.ResponseOption", b =>
                {
                    b.HasOne("Survey.Domain.Survey.Option", "Option")
                        .WithMany("ResponsOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survey.Domain.Survey.Response", "Response")
                        .WithMany("ResponseOptions")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Survey.Section", b =>
                {
                    b.HasOne("Survey.Domain.Survey.Form", "Form")
                        .WithMany("Sections")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survey.Domain.Survey.SectionQuestion", b =>
                {
                    b.HasOne("Survey.Domain.Survey.Question", "Question")
                        .WithMany("QuestionSections")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survey.Domain.Survey.Section", "Section")
                        .WithMany("SectionQuestions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
